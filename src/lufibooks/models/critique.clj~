(ns vonalasfuzet.models.critique
  (:require [vonalasfuzet.models.doc :as doc]
            [clojure.string :as str]
            [vonalasfuzet.models.utils :as utils])
  (:use [hyperion.api]
        [hyperion.types]))

(defentity :critiques
  ; from client
  [doc-key :type (foreign-key :docs)]
  [artwork-key :type (foreign-key :artworks)]
 ; [usefulness :default 0 :type java.lang.Integer]
  [rating :type java.lang.Integer]

  ; calculated
  [revision :default 0 :type java.lang.Integer]
  [username]

  ; auto
  [created-at]
  [updated-at])

(def client-can-create [:doc-key :rating :artwork-key :revision])

(def client-can-update [:doc-key :rating])

(def get-by-key (partial utils/get-by-key "critiques"))

(defn del-by-key [old-entry]
   (let [entry-key (:key old-entry)]
     (doc/del-by-key (:doc-key old-entry))
     (delete-by-key entry-key)
     old-entry))

(defn del-all-for-artwork [artwork-key]
  (doseq [critique (find-by-kind :critiques :filters [:= :artwork-key artwork-key])]
    (doc/del-by-key (:doc-key critique)))
  (delete-by-kind :critiques :filters [:= :artwork-key artwork-key]))

(defn persist [json-as-map username]
    (save (critiques)
          (merge (select-keys json-as-map client-can-create)
                 {:username username})))


(defn update [old-entry json-as-map]
    (save (critiques)
          (merge old-entry
                 (select-keys json-as-map client-can-update))))


(defn get-all [params] (apply find-by-kind
                              (cons :critiques (utils/query-params-to-filter params))))
